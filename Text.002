import bpy
import mathutils
import math

def applyModifiers(context, object):
    context.view_layer.objects.active = object
    for modifier in object.modifiers:
        bpy.ops.object.modifier_apply(modifier=modifier.name)

def createBoolean(context, duplicated, cube, type, solver='EXACT'):
    # Apply modifiers
    for modifier in duplicated.modifiers:
        bpy.ops.object.modifier_apply(modifier=modifier.name)
        
    # Attach the cube as a bool
    booleanMod = duplicated.modifiers.new("Boolean", "BOOLEAN")
    booleanMod.object = cube;
    booleanMod.operation = type
    booleanMod.use_self = True;
    booleanMod.solver = solver;
    return

def makeCube(context, size, location):
        bpy.ops.mesh.primitive_cube_add(size=size,location=location)
        cube = context.active_object
        cube.hide_set(True)
        return cube

def main(context):

    originalObject = context.active_object

    lowResObject = originalObject.copy()
    lowResObject.data = originalObject.data.copy()
    lowResObject.name = "Low Res Copy"
    context.collection.objects.link(lowResObject)

    # Create a low res clone for working on
    # Decimate to 1k polys if over 1k polys
    decimateRatio = min(3000 / len(originalObject.data.polygons), 1)
    decimateMod = lowResObject.modifiers.new("Decimate", "DECIMATE")
    decimateMod.ratio = decimateRatio
    
    # Smooth mesh
    smoothMod = lowResObject.modifiers.new("CorrectiveSmooth", "CORRECTIVE_SMOOTH")
    smoothMod.factor = 0.8
    smoothMod.scale = 0

    applyModifiers(context, lowResObject)

    # Add a wee funnel to the thing
    
    eul = mathutils.Euler((math.radians(180), 0.0, 0.0), 'XYZ')
    coneRadius1 = lowResObject.dimensions.x * 0.8
    bpy.ops.mesh.primitive_cone_add(vertices=64,radius1=coneRadius1,depth=coneRadius1 * 1.2,location=(0,0,lowResObject.dimensions.z + (coneRadius1 * 1.75)),rotation=eul)
    cone = context.active_object
    cone.name = 'Cone Shell'
    
    ## TODO: Move the bit above out to its own function so the cone can be moved

    # Duplicate object for working with
    context.view_layer.objects.active = lowResObject
    duplicated = context.active_object.copy()
    duplicated.data = context.active_object.data.copy()
    duplicated.name = "Shell"
    context.collection.objects.link(duplicated)
    context.view_layer.objects.active = duplicated

    # Make thicker version of model as basis of shell
    mod = duplicated.modifiers.new("Solidify", "SOLIDIFY")
    mod.offset = 1
    mod.thickness = 10
    mod.use_quality_normals = True
    mod.nonmanifold_thickness_mode = 'FIXED'
    mod.use_rim = False
    mod.use_rim_only = False
    
    createBoolean(context, duplicated, cone, 'UNION')

    # Add the cone flange
    coneFlange = cone.copy()
    coneFlange.data = cone.data.copy()
    coneFlange.name = "Cone Flange"
    coneFlange.location.z = coneFlange.location.z - 10
    context.collection.objects.link(coneFlange)
    
    cuboid = makeCube(context, 4, (0, 0, 0))
    bpy.context.object.scale.yz = 500, 500

    createBoolean(context, coneFlange, cuboid, 'INTERSECT')
    applyModifiers(context, coneFlange)
    createBoolean(context, duplicated, coneFlange, 'UNION')

    # Add the middle flange
    middleSection = lowResObject.copy()
    middleSection.data = lowResObject.data.copy()
    middleSection.name = "Middle Flange"
    context.collection.objects.link(middleSection)
    context.view_layer.objects.active = middleSection

    middleMod = middleSection.modifiers.new("Solidify", "SOLIDIFY")
    mod.offset = 1
    middleMod.thickness = 15
    middleMod.use_quality_normals = True
    middleMod.nonmanifold_thickness_mode = 'FIXED'
    middleMod.use_rim = False
    middleMod.use_rim_only = False
    
    createBoolean(context, middleSection, cuboid, 'INTERSECT')
    applyModifiers(context, middleSection)

    createBoolean(context, duplicated, middleSection, 'UNION')

    applyModifiers(context, duplicated)
    
    # Delete middle flange and cone flange
    bpy.data.objects.remove(bpy.data.objects["Middle Flange"], do_unlink=True)
    bpy.data.objects.remove(bpy.data.objects["Cone Flange"], do_unlink=True)
    
    ## Create inner shell to be subtracted from main shell
    innerShell = lowResObject.copy()
    innerShell.data = lowResObject.data.copy()
    innerShell.name = "Shell"
    context.collection.objects.link(innerShell)
    
    mod = innerShell.modifiers.new("Solidify", "SOLIDIFY")
    mod.offset = 1
    mod.thickness = 8
    mod.use_quality_normals = True
    mod.nonmanifold_thickness_mode = 'FIXED'
    mod.use_rim = False
    mod.use_rim_only = False
    
    innerCone = cone.copy()
    innerCone.data = cone.data.copy()
    innerCone.name = "Cone Inner"
    innerCone.location.z = cone.location.z + 5
    context.collection.objects.link(innerCone)
    
    createBoolean(context, innerShell, innerCone, 'UNION')
    applyModifiers(context, innerShell)
    
    # Delete inner cone
    bpy.data.objects.remove(bpy.data.objects["Cone Inner"], do_unlink=True)
    bpy.data.objects.remove(bpy.data.objects["Cone Shell"], do_unlink=True)
    
    # Subtract inner from outer shells
    createBoolean(context, duplicated, innerShell, 'DIFFERENCE', 'FAST')
    applyModifiers(context, innerShell)
    applyModifiers(context, duplicated)
    
    # Hide inner shell
    # TODO: Boolean from low res object to create a weight/volume estimate
    innerShell.hide_set(True)
    lowResObject.hide_set(True)

    # Make a cube to be used for floor boolean, 400mm dimension
    cube = makeCube(context, 1000, (0, 0, -499.9))
    createBoolean(context, duplicated, cube, 'DIFFERENCE')

    # Duplicated union mesh
    leftSide = duplicated.copy()
    leftSide.data = duplicated.data.copy()
    leftSide.name = "Shell 2"
    context.collection.objects.link(leftSide)

    # Make a cube to intersect on each side of mesh
    cube = makeCube(context, 600, (300, 0, 300))
    createBoolean(context, duplicated, cube, 'DIFFERENCE')

    cube = makeCube(context, 600, (-300, 0, 300))
    createBoolean(context, leftSide, cube, 'DIFFERENCE')
    
    # Apply modifiers to each side of mesh
    applyModifiers(context, duplicated)
    applyModifiers(context, leftSide)

class SimpleOperator(bpy.types.Operator):
    """Tooltip"""
    bl_idname = "object.simple_operator"
    bl_label = "Simple Object Operator"

    @classmethod
    def poll(cls, context):
        return context.active_object is not None

    def execute(self, context):
        main(context)
        return {'FINISHED'}

def menu_func(self, context):
    self.layout.operator(SimpleOperator.bl_idname, text=SimpleOperator.bl_label)


# Register and add to the "object" menu (required to also use F3 search "Simple Object Operator" for quick access).
def register():
    bpy.utils.register_class(SimpleOperator)
    bpy.types.VIEW3D_MT_object.append(menu_func)


def unregister():
    bpy.utils.unregister_class(SimpleOperator)
    bpy.types.VIEW3D_MT_object.remove(menu_func)


if __name__ == "__main__":
    register()

    # test call
    bpy.ops.object.simple_operator()